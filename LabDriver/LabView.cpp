// -*- C++ -*-
//
// generated by wxGlade 0.7.2 on Thu Oct 20 13:35:21 2016
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include "LabView.h"
#include "MotorController.h"
#include "VoltageControl.h"
#include "VoltageControlNI.h"
#include "Panel.h"

// begin wxGlade: ::extracode
// end wxGlade


//const float STEPPERMM = STEPPERTURN/25.4; //TODO change this to be se from within the header dialog



MotorController* mot;
VoltageNI* volt;
VoltageControl* volt2;
Panel* panelConfig;
HeaderEdit* HeaderWindow;



BigFrame::BigFrame(wxWindow* parent) : MainFrame(parent)
{
	//mot = new MotorController(3, 9600);
	volt = new VoltageNI();
}

void BigFrame::onQuit(wxCommandEvent& WXUNUSED(event))
{
	Close(true);
}
//
void BigFrame::yUpButtonClicked(wxCommandEvent & event)
{
	//distanceToMove = distanceBox->GetSelection();
	try
	{
		mot->stepMotor(2, distanceToMove);
	}
	catch (...)
	{ }

}

void BigFrame::yDownButtonClicked(wxCommandEvent & event)
{
	//distanceToMove = distanceBox->GetSelection();
	mot->stepMotor(2, -distanceToMove);

}

void BigFrame::xLeftButtonClicked(wxCommandEvent & event)
{
	//distanceToMove = distanceBox->GetSelection();
	mot->stepMotor(1, distanceToMove);

}

void BigFrame::xRightButtonClicked(wxCommandEvent & event)
{
	//distanceToMove = distanceBox->GetSelection();
	mot->stepMotor(1, -distanceToMove);

}

void BigFrame::homeButtonClicked(wxCommandEvent & event)
{
	//distanceToMove = distanceBox->GetSelection();
	mot->setZeroX();
	mot->setZeroY();
}

void BigFrame::goToHomeButtonClicked(wxCommandEvent & event)
{
	//distanceToMove = distanceBox->GetSelection();
	mot->goZero();
}

void BigFrame::distanceBoxClicked(wxCommandEvent & event)
{
	distanceToMove = convertDistance(distanceBox->GetSelection());
}
//
int BigFrame::convertDistance(int radioButton)
{
	int ret;
	switch (radioButton)
	{
	case 0:
		ret = (int) (0.01 / MMPERSTEP);
		break;
	case 1:
		ret = (int)(0.1 / MMPERSTEP);
		break;
	case 2:
		ret = (int)(1.0 / MMPERSTEP);
		break;
	case 3:
		ret = (int)(5.0 / MMPERSTEP);
		break;
	case 4:
		ret = (int)(10.0 / MMPERSTEP);
		break;
	default:
		ret = 0;
		break;
	}

	return ret;
}

void BigFrame::scanTypeSelected(wxCommandEvent & event)
{
	static int scanChosen = m_choice1->GetSelection();
	switch (scanChosen)
	{
	case 0:
		scanType = "Free";
		break;
	case 1:
		scanType = "PixelScan";
		break;
	case 2:
		scanType = "PixelMap";
		break;
	case 3:
		scanType = "LineScan";
		break;
	default:
		scanType = "None";
		break;
	}
}

//wxStaticBoxSizer* test;

void BigFrame::toggleHV(wxCommandEvent& event)
{
	int voltageStatus = m_radioBox3->GetSelection();
	if (voltageStatus == 0)
	{
		string voltage = m_textCtrl22->GetLineText(0);

			volt->setVoltage(stoi(voltage));
			volt->voltageOn();

	}
	if (voltageStatus == 1)
		volt->voltageOff();
}

void BigFrame::setStartVoltage(wxCommandEvent& event)
{
	//string voltage = m_textCtrl22->GetLineText(0);
	
}

void BigFrame::motorControllerConnectClicked(wxCommandEvent & event)
{
	static bool connected = false;

	if (!connected)
	{
		mot = new MotorController(3, 9600);
		connected = true;
	}
}

void BigFrame::motorControllerDisconnectClicked(wxCommandEvent & event)
{
	//mot->portClose();
}

void BigFrame::HVConnectClicked(wxCommandEvent & event)
{
	//volt = new VoltageNI();
}

void BigFrame::openPanelFrame(wxCommandEvent& event) 
{ 
	panelConfig = new Panel(this);
	panelConfig->Show(true);
}

void BigFrame::setEndVoltage(wxCommandEvent & event)
{
	//m_textCtrl23->SelectAll();
	//if (wxAtoi(m_textCtrl22->GetLineText(0)) >= wxAtoi(m_textCtrl23->GetLineText(0)))
	//{
	//	m_textCtrl23->WriteText(m_textCtrl22->GetLineText(0));
	//}
}

void BigFrame::updateButtonClicked(wxCommandEvent& event)
{
	int startvoltage, endvoltage, xoffset, yoffset, xstepsize, ystepsize, voltagestepsize, dwelltime;
	int numsteps;
	double totaltime;
	//string filename;

	startvoltage = wxAtoi(m_textCtrl22->GetLineText(0));
	endvoltage = wxAtoi(m_textCtrl23->GetLineText(0));
	voltagestepsize = wxAtoi(m_textCtrl40->GetLineText(0));
	numsteps = (endvoltage - startvoltage) / voltagestepsize;
	
	m_textCtrl45->SelectAll();
	m_textCtrl45->WriteText(wxString::Format(wxT("%i"), numsteps));

	xoffset = wxAtoi(m_textCtrl18->GetLineText(0));
	yoffset = wxAtoi(m_textCtrl19->GetLineText(0));
	xstepsize = wxAtoi(m_textCtrl20->GetLineText(0));
	ystepsize = wxAtoi(m_textCtrl21->GetLineText(0));

	dwelltime = wxAtoi(m_textCtrl42->GetLineText(0));
	totaltime = xoffset / xstepsize * yoffset / ystepsize * (endvoltage - startvoltage) / voltagestepsize* dwelltime;

	m_textCtrl46->SelectAll();
	m_textCtrl46->WriteText(wxString::Format(wxT("%f"), totaltime / 3600));
}

void markButtonClicked(wxCommandEvent& event)
{

}

void BigFrame::setHome(wxCommandEvent& event)
{
	mot->setZero();
}

void BigFrame::goToHome(wxCommandEvent& event)
{
	mot->goZero();
}

HeaderEdit::HeaderEdit(wxWindow* parent) : header(parent)
{

}

void BigFrame::openHeaderFrame(wxCommandEvent& event)
{
	if (!HeaderWindow)
		HeaderWindow = new HeaderEdit(this);
	HeaderWindow->Show(true);
}

string HeaderEdit::getSourceConfig()
{
	switch (m_radioBox1->GetSelection())
	{
	case 0:
		return string("Dynamic");
		break;
	case 1:
		return string("Static");
		break;
	case 2:
		return string("User");
		break;
	default:
		return string("Not Selected");
		break;
	}
}

void HeaderEdit::headerOkClicked(wxCommandEvent& event)
{
	copyData();
	Show(false);
}
void HeaderEdit::headerCancelClicked(wxCommandEvent& event)
{
	Show(false);
}

void HeaderEdit::saveHeader(wxCommandEvent& event)
{
	int once = 0;
	copyData();
	string fullpath;
	wxFileDialog* SaveDialog = new wxFileDialog(
		this, _("Choose a location to save to"), wxEmptyString, wxString(headerInfo.panelName),
		wxEmptyString, wxFD_SAVE | wxFD_OVERWRITE_PROMPT, wxDefaultPosition);

	if (SaveDialog->ShowModal() == wxID_CANCEL)
		SaveDialog->Destroy();     // the user changed idea...


	if (SaveDialog->ShowModal() == wxID_OK && once == 0) // if the user click "Save" instead of "Cancel"
	{

		fullpath = SaveDialog->GetPath() + SaveDialog->GetFilename();
		wxMessageBox(fullpath);
		ofstream file;
		file.open(fullpath);

		file << headerInfo;
		file.close();
		//makeGenHeadFile(headerInfo, fullpath);
		once++;
	}
	SaveDialog->Destroy();
}

void HeaderEdit::openHeader(wxCommandEvent& event)
{

}

void HeaderEdit::copyData()
{
	headerInfo.panelName = m_textCtrl1->GetLineText(0);
	headerInfo.sourceName = m_textCtrl11->GetLineText(0);
	headerInfo.sourceConfig = getSourceConfig();
	headerInfo.triggerSetup = m_textCtrl1322->GetLineText(0);
	headerInfo.gas = m_textCtrl13->GetLineText(0);
	headerInfo.pressure = wxAtof(m_textCtrl131->GetLineText(0));
	headerInfo.discThresh = wxAtof(m_textCtrl48->GetLineText(0));
	headerInfo.quench = wxAtof(m_textCtrl132->GetLineText(0));
	headerInfo.numRO = wxAtoi(m_textCtrl47->GetLineText(0));
	headerInfo.roLines = m_textCtrl1321->GetLineText(0);
	headerInfo.triggerRO = m_textCtrl1322->GetLineText(0);
	headerInfo.attenRO = wxAtof(m_textCtrl24->GetLineText(0));
	headerInfo.numHV = wxAtoi(m_textCtrl1324->GetLineText(0));
	headerInfo.linesHV = m_textCtrl1325->GetLineText(0);
	headerInfo.triggerHV = m_textCtrl1323->GetLineText(0);
	headerInfo.attenHV = wxAtof(m_textCtrl1326->GetLineText(0));
}